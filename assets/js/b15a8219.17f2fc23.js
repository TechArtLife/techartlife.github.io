"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1148],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>_});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function g(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),a=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):g(g({},n),e)),t},p=function(e){var n=a(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},L=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=a(t),L=l,_=c["".concat(s,".").concat(L)]||c[L]||d[L]||o;return t?r.createElement(_,g(g({ref:n},p),{},{components:t})):r.createElement(_,g({ref:n},p))}));function _(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,g=new Array(o);g[0]=L;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:l,g[1]=i;for(var a=2;a<o;a++)g[a]=t[a];return r.createElement.apply(null,g)}return r.createElement.apply(null,t)}L.displayName="MDXCreateElement"},1247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>g,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var r=t(7462),l=(t(7294),t(3905));const o={title:"\u3010\u5f00\u6e90\u5e93\u3011\u5c01\u88c5spdlog\u5e93",date:"2021-10-28T22:40:32.169Z",description:"\u3010\u5f00\u6e90\u5e93\u3011\u5c01\u88c5spdlog\u5e93"},g="spdlog\u5e93",i={unversionedId:"\u7f16\u7a0b\u8bed\u8a00/cpp/spdlog-wrapper/index",id:"\u7f16\u7a0b\u8bed\u8a00/cpp/spdlog-wrapper/index",title:"\u3010\u5f00\u6e90\u5e93\u3011\u5c01\u88c5spdlog\u5e93",description:"\u3010\u5f00\u6e90\u5e93\u3011\u5c01\u88c5spdlog\u5e93",source:"@site/docs/\u7f16\u7a0b\u8bed\u8a00/cpp/spdlog-wrapper/index.md",sourceDirName:"\u7f16\u7a0b\u8bed\u8a00/cpp/spdlog-wrapper",slug:"/\u7f16\u7a0b\u8bed\u8a00/cpp/spdlog-wrapper/",permalink:"/docs/\u7f16\u7a0b\u8bed\u8a00/cpp/spdlog-wrapper/",draft:!1,tags:[],version:"current",frontMatter:{title:"\u3010\u5f00\u6e90\u5e93\u3011\u5c01\u88c5spdlog\u5e93",date:"2021-10-28T22:40:32.169Z",description:"\u3010\u5f00\u6e90\u5e93\u3011\u5c01\u88c5spdlog\u5e93"},sidebar:"tutorialSidebar",previous:{title:"\u3010\u8bbe\u8ba1\u6a21\u5f0f\u3011C++11\u5355\u4f8b\u6a21\u5f0f\uff08\u7ebf\u7a0b\u5b89\u5168\uff09",permalink:"/docs/\u7f16\u7a0b\u8bed\u8a00/cpp/cpp-singleton-design-pattern/"},next:{title:"Lua",permalink:"/docs/\u7f16\u7a0b\u8bed\u8a00/lua/"}},s={},a=[],p={toc:a},c="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"spdlog\u5e93"},"spdlog\u5e93"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u7f51\u5740\uff1a",(0,l.kt)("a",{parentName:"li",href:"https://github.com/gabime/spdlog"},"https://github.com/gabime/spdlog")),(0,l.kt)("li",{parentName:"ol"},"\u7279\u6027\uff1a",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u652f\u6301\u63a7\u5236\u53f0\u6216\u5f02\u6b65\u6587\u4ef6\u8f93\u51fa"),(0,l.kt)("li",{parentName:"ul"},"\u652f\u6301\u63a7\u5236\u53f0\u5f69\u8272\u8f93\u51fa")))),(0,l.kt)("h1",{id:"\u5c01\u88c5"},"\u5c01\u88c5"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Logger.h")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "Framework/Utility/Singleton.h"\n#include <spdlog/spdlog.h>\n#include <filesystem>\n\nnamespace fs = std::filesystem;\n\nclass Logger : public Singleton<Logger>\n{\npublic:\n    Logger(token);\n    ~Logger();\n\nstd::shared_ptr<spdlog::logger> getLogger()\n{\n    return mLogger;\n}\n\nvoid setLogLevel(std::string level);\n\nprivate:\n    std::shared_ptr<spdlog::logger> mLogger;\n    fs::path mLogDir = fs::current_path();\n    std::string mLogNamePrefix = "log_";\n    bool mConsole = true;\n    std::string mLevel = "debug";\n};\n\n// \u6709\u4ee3\u7801\u884c\u53f7\n// #define LOG_TRACE(...)      SPDLOG_LOGGER_CALL(Logger::instance().getLogger().get(), spdlog::level::trace, __VA_ARGS__)\n// #define LOG_DEBUG(...)      SPDLOG_LOGGER_CALL(Logger::instance().getLogger().get(), spdlog::level::debug, __VA_ARGS__)\n// #define LOG_INFO(...)       SPDLOG_LOGGER_CALL(Logger::instance().getLogger().get(), spdlog::level::info, __VA_ARGS__)\n// #define LOG_WARN(...)       SPDLOG_LOGGER_CALL(Logger::instance().getLogger().get(), spdlog::level::warn, __VA_ARGS__)\n// #define LOG_ERROR(...)      SPDLOG_LOGGER_CALL(Logger::instance().getLogger().get(), spdlog::level::err, __VA_ARGS__)\n// #define LOG_CRITICAL(...)   SPDLOG_LOGGER_CALL(Logger::instance().getLogger().get(), spdlog::level::critical, __VA_ARGS__)\n\n// \u6ca1\u6709\u4ee3\u7801\u884c\u53f7\n#define LOG_TRACE(...)       Logger::instance().getLogger().get()->trace(__VA_ARGS__)\n#define LOG_DEBUG(...)       Logger::instance().getLogger().get()->debug(__VA_ARGS__)\n#define LOG_INFO(...)        Logger::instance().getLogger().get()->info(__VA_ARGS__)\n#define LOG_WARN(...)        Logger::instance().getLogger().get()->warn(__VA_ARGS__)\n#define LOG_ERROR(...)       Logger::instance().getLogger().get()->error(__VA_ARGS__)\n#define LOG_CRITICAL(...)    Logger::instance().getLogger().get()->critical(__VA_ARGS__)\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Logger.cpp")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "Logger.h"\n#include <spdlog/async.h>\n#include <spdlog/sinks/rotating_file_sink.h>\n#include <spdlog/sinks/stdout_color_sinks.h>\n#include <iostream>\n\nLogger::Logger(token)\n{\n    try {\n        const std::string loggerName = mLogNamePrefix + std::string("test");\n        if (mConsole) {\n            mLogger = spdlog::stdout_color_mt(loggerName);\n        } else {\n            // multi part log files, with every part 50M, max 100 files\n            mLogger = spdlog::create_async<spdlog::sinks::rotating_file_sink_mt>(\n            loggerName, mLogDir.append(loggerName + ".log").u8string(), 50 * 1024 * 1024, 100);\n        }\n\n        setLogLevel(mLevel);\n\n        mLogger->set_pattern("[T:%-6t] %+");\n    } catch (const spdlog::spdlog_ex& ex) {\n        std::cout << "[Logger] Initialization failed: " << ex.what() << std::endl;\n    }\n}\n\nLogger::~Logger()\n{\n    spdlog::shutdown();\n}\n\nvoid Logger::setLogLevel(std::string level)\n{\n    mLevel = level;\n\n    if (mLevel == "trace") {\n        mLogger->set_level(spdlog::level::trace);\n        mLogger->flush_on(spdlog::level::trace);\n    } else if (mLevel == "debug") {\n        mLogger->set_level(spdlog::level::debug);\n        mLogger->flush_on(spdlog::level::debug);\n    } else if (mLevel == "info") {\n        mLogger->set_level(spdlog::level::info);\n        mLogger->flush_on(spdlog::level::info);\n    } else if (mLevel == "warn") {\n        mLogger->set_level(spdlog::level::warn);\n        mLogger->flush_on(spdlog::level::warn);\n    } else if (mLevel == "error") {\n        mLogger->set_level(spdlog::level::err);\n        mLogger->flush_on(spdlog::level::err);\n    } else if (mLevel == "critical") {\n        mLogger->set_level(spdlog::level::critical);\n        mLogger->flush_on(spdlog::level::critical);\n    }\n}\n')))),(0,l.kt)("h1",{id:"\u4f7f\u7528"},"\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "Logger.h"\n\nLOG_INFO("Wlecome to use {0} and {1}", "Logger", "Singleton");\n')))}d.isMDXComponent=!0}}]);